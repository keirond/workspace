- name: Configure Docker insecure registry
  hosts: all
  become: yes
  vars:
    registry_host: "nexus.167.254.190.2.nip.io"

  tasks:

    - name: Create Docker config directory if it doesn't exist
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Set insecure registry in daemon.json
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "insecure-registries": ["{{ registry_host }}"]
          }
        mode: '0644'

    - name: Backup original config.toml if exists
      copy:
        src: /etc/containerd/config.toml
        dest: /etc/containerd/config.toml.bak
        remote_src: true
      ignore_errors: true

    - name: Write full new /etc/containerd/config.toml
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri".registry]
            config_path = "/etc/containerd/certs.d"
          
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
          
          [plugins."io.containerd.grpc.v1.cri".cni]
            bin_dir = "/opt/cni/bin"
            conf_dir = "/etc/cni/net.d"
        mode: '0644'

    - name: Create certs.d directory for insecure Nexus registry
      file:
        path: "/etc/containerd/certs.d/{{ registry_host }}"
        state: directory
        mode: '0755'

    - name: Create hosts.toml for insecure Nexus registry
      copy:
        dest: "/etc/containerd/certs.d/{{ registry_host }}/hosts.toml"
        content: |
          server = "http://{{ registry_host }}"
          
          [host."http://{{ registry_host }}"]
            capabilities = ["pull", "resolve", "push"]
            skip_verify = true
        mode: '0644'

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted
        enabled: true

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        enabled: true

    - name: Restart Kubelet
      systemd:
        name: kubelet
        state: restarted
        enabled: true
