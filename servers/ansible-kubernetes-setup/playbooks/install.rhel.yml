---
- name: Install Kubernetes Control Plane
  hosts: master[0]
  become: true
  vars:
    pod_network_cidr: "10.244.0.0/16"
    kubeconfig_path: $HOME/.kube/config

  tasks:
    - name: Initialize Kubernetes Control Plane
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      args:
        creates: /etc/kubernetes/admin.conf
      register: kubeadm_init
      retries: 3
      delay: 10
      until: kubeadm_init.rc == 0

    - debug:
        var: kubeadm_init.stdout_lines

    - name: Create .kube directory for admin user
      file:
        path: $HOME/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy admin kubeconfig to admin user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kubeconfig_path }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

- name: Deploy Pod Network to the Cluster
  hosts: master[0]
  become: true
  tasks:
    - name: Wait for API server to be ready
      command: kubectl get --raw=/healthz
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: apiserver_health
      retries: 10
      delay: 6
      until: apiserver_health.rc == 0

    - name: Apply Flannel CNI plugin
      command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

    - name: Apply Flannel CNI
      command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: flannel_apply
      changed_when: "'created' in flannel_apply.stdout or 'configured' in flannel_apply.stdout"

    - name: Wait for Flannel pods to be ready
      shell: |
        kubectl -n kube-flannel wait pod --for=condition=Ready -l app=flannel --timeout=180s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: flannel_wait
      ignore_errors: true

- name: Generate Join Commands and Join Worker Nodes
  hosts: master[0]
  become: true
  tasks:
    - name: Generate join command for workers
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Set worker join command for other plays
      add_host:
        name: kube_worker_join
        kubeadm_join_command: "{{ join_command_raw.stdout }}"

- name: Join Worker Nodes to the Kubernetes Cluster
  hosts: all:!master
  become: true
  vars:
    kubeadm_join_command: "{{ hostvars['kube_worker_join']['kubeadm_join_command'] }}"
  tasks:
    - name: Join the node to the Kubernetes cluster
      command: "{{ kubeadm_join_command }}"
      args:
        creates: /etc/kubernetes/kubelet.conf

- name: Generate Join Commands and Join Additional Master Nodes
  hosts: master[0]
  become: true
  tasks:
    - name: Create join token
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Upload control plane certificates
      shell: kubeadm init phase upload-certs --upload-certs
      register: cert_key_raw

    - name: Save certificate key
      set_fact:
        kubeadm_join_command: "{{ join_command_raw.stdout }} --control-plane --certificate-key {{ cert_key_raw.stdout_lines[-1] }}"

    - name: Set join command for other plays
      add_host:
        name: kube_master_join
        kubeadm_join_command: "{{ kubeadm_join_command }}"

- name: Join Additional Master Nodes to Kubernetes Cluster
  hosts: master:!master[0]
  become: true
  vars:
    kubeadm_join_command: "{{ hostvars['kube_master_join']['kubeadm_join_command'] }}"
  tasks:
    - name: Join the node to the Kubernetes cluster as a control plane
      command: "{{ kubeadm_join_command }}"
      args:
        creates: /etc/kubernetes/kubelet.conf

    - name: Create .kube directory for admin user
      file:
        path: "$HOME/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Copy kubeconfig for admin user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ kubeconfig_path }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

- name: Verify Cluster Nodes
  hosts: master[0]
  become: true
  tasks:
    - name: Get cluster nodes
      command: kubectl get nodes -A -o wide
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: cluster_nodes
      changed_when: false

    - debug:
        var: cluster_nodes.stdout_lines
