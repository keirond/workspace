---
- name: Check Kubernetes binary versions and paths across hosts
  hosts: all
  gather_facts: false
  vars:
    binaries:
      - name: kubelet
        version_cmd: "kubelet --version"
        path_candidates:
          - /usr/bin/kubelet
          - /usr/local/bin/kubelet
      - name: kubeadm
        version_cmd: "kubeadm version -o short"
        path_candidates:
          - /usr/bin/kubeadm
          - /usr/local/bin/kubeadm
      - name: kubectl
        version_cmd: "kubectl version --client -o json | jq -r .clientVersion.gitVersion"
        path_candidates:
          - /usr/bin/kubectl
          - /usr/local/bin/kubectl

  tasks:

    - name: Find binary path
      shell: |
        for p in {{ item.path_candidates | join(' ') }}; do
          if [ -x "$p" ]; then
            echo "$p"
            exit 0
          fi
        done
        exit 1
      loop: "{{ binaries }}"
      register: resolved_paths
      changed_when: false
      failed_when: false

    - name: Merge binaries with resolved paths
      set_fact:
        binary_info: >-
          {{
            binary_info | default([]) + [{
              "name": binaries[loop.index0].name,
              "version_cmd": binaries[loop.index0].version_cmd,
              "path": item.stdout,
              "found": item.rc == 0
            }]
          }}
      loop: "{{ resolved_paths.results }}"

    - name: Run version command if binary was found
      shell: "{{ item.version_cmd }}"
      register: version_output
      loop: "{{ binary_info }}"
      when: item.found
      changed_when: false
      failed_when: false

    - name: Print summary
      debug:
        msg: |
          {{ item.name }}:
            Path: {{ item.path }}
            Version: {{ version_output.results[loop.index0].stdout | default('Unknown') }}
      loop: "{{ binary_info }}"
